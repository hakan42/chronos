{"name":"Chronos","tagline":"raspified led clock","body":"## chronos\r\n\r\na LED clock controller with REST API\r\n\r\n## What? Why? And Wherefore?\r\n\r\nMy wall clock died. And, instead of buying a new one like any sensible person would do,\r\nI started creating my own LED clock. And being the computer geek that I am, I wanted it\r\nto be controllable by my home automation system.\r\n\r\n###### TODO: insert picture here\r\n\r\n\r\n## Hardware\r\n\r\nThe clock consists mainly of:\r\n\r\n* A [Raspberry Pi](https://www.raspberrypi.org/), bought from [Amazon](http://www.amazon.de/gp/product/B00T3BX0L8)\r\n* A ring with 60 LEDs on it, bought from [watterott electronics](http://www.watterott.com/de/WS2812-RGB-Ring-60-Black-Edition)\r\n* A [FadeCandy](http://www.misc.name/fadecandy/) LED controller, bought from [Amazon](http://www.amazon.de/gp/product/B00K02HWIG)\r\n\r\n## Software\r\n\r\n* A [Spring Boot](http://projects.spring.io/spring-boot/) based Java application\r\n* The native controller for the FadeCandy\r\n* A dockerified boot image for the Pi, thanks to the guys at [Hypriot](http://blog.hypriot.com/)\r\n\r\n## Links\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}